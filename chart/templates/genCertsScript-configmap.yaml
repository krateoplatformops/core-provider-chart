apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "core-provider.fullname" . }}-script-configmap
  labels:
    {{- include "core-provider.labels" . | nindent 4 }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-install, pre-upgrade, post-install, post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  create-certs.sh: |-
    #! /bin/bash

    WEBHOOK_NS=${1:-"default"}
    WEBHOOK_NAME=${2:-"webhook-service"}

    # Create certs for our webhook
    openssl genrsa -out /tmp/tls.key 2048
    openssl req -new -key /tmp/tls.key \
        -subj "/CN=${WEBHOOK_NAME}.${WEBHOOK_NS}.svc" \
        -addext "subjectAltName=DNS:${WEBHOOK_NAME}.${WEBHOOK_NS}.svc,DNS:${WEBHOOK_NAME}.${WEBHOOK_NS}.svc" \
        -out /tmp/tls.csr

    openssl x509 -req -extfile <(printf "subjectAltName=DNS:${WEBHOOK_NAME}.${WEBHOOK_NS}.svc,DNS:${WEBHOOK_NAME}.${WEBHOOK_NS}.svc\nbasicConstraints=CA:TRUE") -days 365 -in /tmp/tls.csr -signkey /tmp/tls.key -out /tmp/tls.crt

    # Create certs secrets for k8s
    kubectl create secret generic \
        core-provider-certs \
        --from-file=tls.key=/tmp/tls.key \
        --from-file=tls.crt=/tmp/tls.crt


    # # Set the CABundle on the webhook registration
    CA_BUNDLE=$(base64 -w 0 /tmp/tls.crt)

    kubectl create configmap core-provider-configmap --from-literal=core-provider-mutate.yaml="webhooks:
    - name: core.provider.krateo.io
      admissionReviewVersions:
        - v1
        - v1alpha2
        - v1alpha1
      rules:
        - operations: ['"CREATE"']
          apiGroups: ['"composition.krateo.io"']
          apiVersions: ['"*"']
          resources: ['"*"']
          scope: '"*"'
      sideEffects: None
      clientConfig:
        service:
          namespace: ${WEBHOOK_NS}
          name: core-provider-webhook-service
          path: /mutate
          port: 9443
        caBundle: ${CA_BUNDLE}"

    rm /tmp/tls.*
